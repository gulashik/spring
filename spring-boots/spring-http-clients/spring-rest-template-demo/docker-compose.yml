version: '3.8'

services:
  # Основное приложение RestTemplate Demo
  resttmplt-demo:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: resttmplt-demo-app
    ports:
      - "8080:8080"
    environment:
      # Настройки Spring профилей
      - SPRING_PROFILES_ACTIVE=docker
      # Настройки логирования
      - LOGGING_LEVEL_ORG_GUALSH_DEMO_RESTTMPLT=INFO
      # Настройки управления
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
    volumes:
      # Монтируем логи для внешнего доступа
      - ./logs:/app/logs
    networks:
      - resttmplt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus для мониторинга метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: resttmplt-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - resttmplt-network
    restart: unless-stopped

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: resttmplt-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - resttmplt-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx для проксирования и балансировки нагрузки
  nginx:
    image: nginx:alpine
    container_name: resttmplt-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - resttmplt-network
    restart: unless-stopped
    depends_on:
      - resttmplt-demo

  # WireMock для тестирования (опционально)
  wiremock:
    image: wiremock/wiremock:latest
    container_name: resttmplt-wiremock
    ports:
      - "8089:8080"
    volumes:
      - ./docker/wiremock/mappings:/home/wiremock/mappings:ro
      - ./docker/wiremock/__files:/home/wiremock/__files:ro
    command: ["--global-response-templating", "--verbose"]
    networks:
      - resttmplt-network
    restart: unless-stopped

# Именованные тома для персистентности данных
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Сеть для изоляции сервисов
networks:
  resttmplt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16