plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.sprboot.mapstractexample'
version = '0.0.1-SNAPSHOT'

// todo Определяем путь для генерируемых файлов
def generatedSourcesDir = "${projectDir}/src/main/generated"

// todo Добавляем созданную директорию как источник кода
sourceSets {
    main {
        java {
            srcDirs += [generatedSourcesDir]
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    // todo Зависимости Mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    // todo Важно! Добавляем поддержку интеграции Lombok и MapStruct
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Настройка для генерации кода
tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=IGNORE',
            '-s', generatedSourcesDir
    ]
    // todo Важно! Правильный порядок процессоров аннотаций
    options.annotationProcessorPath = configurations.annotationProcessor
}

// todo Добавляем задачу для очистки сгенерированных файлов
task cleanGenerated(type: Delete) {
    delete generatedSourcesDir
}

// todo при запуске приложения зависимости в нужном порядке cleanGenerated->clean->compileJava
clean.dependsOn cleanGenerated
compileJava.dependsOn clean