# Spring Cloud Gateway Demo Configuration
# Образовательный проект для демонстрации возможностей Spring Cloud Gateway

server:
  port: 8080
  # Настройка Netty для оптимальной производительности
  netty:
    connection-timeout: 2s
    h2c-max-content-length: 0B
    initial-buffer-size: 128
    max-initial-line-length: 4096
    validate-headers: true

spring:
  application:
    name: spring-cloud-gateway-demo

  # Конфигурация Spring Cloud Gateway
  cloud:
    gateway:
      # Глобальные настройки Gateway
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
            allowCredentials: false

      # Настройки по умолчанию для всех маршрутов
      default-filters:
        - AddResponseHeader=X-Gateway-Demo, Spring-Cloud-Gateway
        - DedupeResponseHeader=Access-Control-Allow-Origin
        - DedupeResponseHeader=Access-Control-Allow-Credentials

      # Определение маршрутов
      routes:
        # Маршрут для демонстрации основных возможностей
        - id: demo-service
          uri: https://httpbin.org # uri - указывает, куда будут перенаправляться запросы
          predicates: # условия срабатывания
            - Path=/demo/** # учитывается path
          filters:
            # удаляет первый сегмент пути /demo/get → /get остаток добавиться к uri → https://httpbin.org/get
            - StripPrefix=1
            # добавление заголовков
            - AddRequestHeader=X-Request-Demo, Gateway-Demo
            - AddResponseHeader=X-Response-Demo, Processed-By-Gateway

        # Маршруты с весовым балансировщиком
        #   Сводно При отправке 10 запросов на /weighted/get.
        #     ~8 запросов уйдут на https://httpbin.org/get
        #     ~2 запроса уйдут на https://postman-echo.com/get
        # Основной маршрут
        - id: weighted-service
          uri: https://httpbin.org
          predicates:
            - Path=/weighted/**
            # group1 - название группы весового балансировщика, 8 - вес данного маршрута (из общего веса группы)
            - Weight=group1, 8
          filters:
            - StripPrefix=1
            # добавление заголовков
            - AddRequestHeader=X-Weight-Group, group1

        # Альтернативный маршрут для демонстрации весового балансировщика
        - id: weighted-service-alt
          uri: https://postman-echo.com
          predicates:
            - Path=/weighted/**
            # group1 - название группы весового балансировщика, 2 - вес данного маршрута (из общего веса группы)
            - Weight=group1, 2
          filters:
            - StripPrefix=1
            - AddRequestHeader=X-Weight-Group, group1-alt

        # Маршрут с условием по времени
        - id: time-based-service
          uri: https://httpbin.org
          predicates:
            - Path=/time/**
            - After=2024-01-01T00:00:00+00:00[UTC]
            - Before=2026-12-31T23:59:59+00:00[UTC]
          filters:
            - StripPrefix=1
            - AddRequestHeader=X-Time-Based, active

        # Маршрут с условием по заголовкам
        - id: header-based-service
          uri: https://httpbin.org
          predicates:
            - Path=/headers/**
            # Заголовок X-Request-Type присутствует и равен demo
            - Header=X-Request-Type, demo
          filters:
            - StripPrefix=1
            - AddRequestHeader=X-Header-Matched, true

        # Маршрут с условием по параметрам запроса
        - id: query-based-service
          uri: https://httpbin.org
          predicates:
            - Path=/query/**
            # Query присутствует параметр равный
            #   GET /query/test?type=demo HTTP/1.1 будет на на https://httpbin.org/test?type=demo
            - Query=type, demo
          filters:
            # удаляет первый сегмент пути /query/test → /test
            - StripPrefix=1
            - AddRequestHeader=X-Query-Matched, true

        # Маршрут с Rate Limiting (отключен по умолчанию, требует Redis) см. README.md
        # Алгоритм работы (Token Bucket)
        #   1. Корзина токенов вмещает максимум 20 токенов
        #   2. Пополнение: каждую секунду добавляется 10 токенов
        #   3. Обработка запроса: тратится 1 токен
        #   4. Если токенов нет → запрос отклоняется с HTTP 429 (Too Many Requests)
        - id: rate-limited-service
          uri: https://httpbin.org
          predicates:
           - Path=/rate-limited/**
          filters:
           - name: RequestRateLimiter
             args:
               redis-rate-limiter.replenishRate: 10 # Базовая скорость пополнения токенов 10 токенов в секунду
               redis-rate-limiter.burstCapacity: 20 # Максимальное количество токенов в корзине 20 токенов
               redis-rate-limiter.requestedTokens: 1 # Каждый запрос "стоит" 1 токен
           - StripPrefix=1

        # Маршрут с Circuit Breaker
        # Состояния Circuit Breaker'а
        # CLOSED
        # - Все запросы проходят к backend-сервису
        # - Отслеживаются ошибки и медленные запросы

        # OPEN
        # - Все запросы перенаправляются на `fallbackUri`
        # - Backend-сервис не вызывается

        # HALF-OPEN
        # - Пропускается ограниченное количество тестовых запросов
        # - Если успешны → переход в CLOSED
        # - Если неуспешны → переход в OPEN

        # Логика работы
        # Переход CLOSED → OPEN:
        # - ≥50% запросов завершились ошибкой ИЛИ
        # - ≥50% запросов выполнялись >2 секунд
        # - В окне минимум 5 запросов из последних 10

        # Переход OPEN → HALF-OPEN:
        # - Прошло 30 секунд с момента открытия
        - id: circuit-breaker-service
          uri: https://httpbin.org
          predicates:
            - Path=/circuit-breaker/**
          filters:
            - name: CircuitBreaker
              args:
                # Имя экземпляра Circuit Breaker'а, ссылается на конфигурацию
                #   в разделе resilience4j.circuitbreaker.instances.demo-circuit-breaker
                name: demo-circuit-breaker
                # Запасной маршрут при срабатывании Circuit Breaker'а
                #   forward:/fallback - перенаправление на локальный endpoint
                fallbackUri: forward:/fallback
            - StripPrefix=1

        # Маршрут с Retry(механизм повторных попыток)
        - id: retry-service
          uri: https://httpbin.org
          predicates:
            - Path=/retry/**
          filters:
            - name: Retry
              args:
                retries: 3 # Максимальное количество повторов
                statuses: BAD_GATEWAY,GATEWAY_TIMEOUT # HTTP-статусы для повтора
                methods: GET,POST # HTTP-методы, для которых разрешены повторы. Логичны только idempotent методы
                backoff:
                  firstBackoff: 10ms # Первая задержка
                  maxBackoff: 50ms # Максимальная задержка
                  factor: 2 # Коэффициент увеличения задержки
                  basedOnPreviousValue: false # Расчет от базового значения, а не от предыдущего
            - StripPrefix=1

        # Маршрут с модификацией пути
        - id: path-rewrite-service
          uri: https://httpbin.org
          predicates:
            - Path=/api/v1/**
          filters:
            # GET /api/v1/orders/123 -> GET /orders/123 будет удален префикс /api/v1
            - RewritePath=/api/v1/(?<path>.*), /${path} # RewritePath=<регулярное_выражение>, <замена>
            - AddRequestHeader=X-Original-Path, /api/v1 # удобно записать что удалили

  # Настройки Redis для Rate Limiting (отключен по умолчанию, требует Redis) см. README.md
  data:
     redis:
       host: localhost
       port: 6379
       database: 0
       timeout: 2000ms
       lettuce:
         pool:
           max-active: 8
           max-idle: 8
           min-idle: 0

# Настройки для Circuit Breaker
resilience4j:
  circuitbreaker:
    instances:
      demo-circuit-breaker:
        failure-rate-threshold: 50 # 50% неудачных запросов
        wait-duration-in-open-state: 30s # 30 сек ожидания
        sliding-window-size: 10 # окно из 10 запросов
        minimum-number-of-calls: 5 # минимум 5 вызовов для анализа
        slow-call-rate-threshold: 50 # 50% медленных запросов
        slow-call-duration-threshold: 2s # запрос считается медленным >2 сек

  timelimiter:
    instances:
      demo-circuit-breaker:
        timeout-duration: 3s # Максимальное время выполнения запроса 3 секунды (>3 сек будут принудительно прерваны)

# Настройки Actuator для мониторинга
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  info:
    env:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

# Настройки логирования
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.gualsh.demo.gw: DEBUG
    reactor.netty: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Кастомные настройки для демо-приложения
gateway:
  demo:
    enabled: true
    rate-limiting:
      enabled: true  # требует Redis
      default-rate: 100
      burst-capacity: 200
    security:
      enabled: true
      allowed-origins:
        - "*"
    circuit-breaker:
      enabled: true
      failure-rate-threshold: 50
      wait-duration-in-open-state: 30s
      sliding-window-size: 10
    monitoring:
      enabled: true
      detailed-metrics-enabled: true
      prometheus-enabled: true
    caching:
      enabled: false
    logging:
      detailed-logging-enabled: true
      log-request-bodies: false
      log-response-bodies: false
      log-headers: true