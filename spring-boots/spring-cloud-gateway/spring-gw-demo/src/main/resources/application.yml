# Spring Cloud Gateway Demo Configuration
# Образовательный проект для демонстрации возможностей Spring Cloud Gateway

server:
  port: 8080
  # Настройка Netty для оптимальной производительности
  netty:
    connection-timeout: 2s
    h2c-max-content-length: 0B
    initial-buffer-size: 128
    max-initial-line-length: 4096
    validate-headers: true

spring:
  application:
    name: spring-cloud-gateway-demo

  # Конфигурация Spring Cloud Gateway
  cloud:
    gateway:
      # Глобальные настройки Gateway
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
            allowCredentials: false

      # Настройки по умолчанию для всех маршрутов
      default-filters:
        - AddResponseHeader=X-Gateway-Demo, Spring-Cloud-Gateway
        - DedupeResponseHeader=Access-Control-Allow-Origin
        - DedupeResponseHeader=Access-Control-Allow-Credentials

      # Определение маршрутов
      routes:
        # Маршрут для демонстрации основных возможностей
        - id: demo-service
          uri: https://httpbin.org # uri - указывает, куда будут перенаправляться запросы
          predicates: # условия срабатывания
            - Path=/demo/** # учитывается path
          filters:
            # удаляет первый сегмент пути /demo/get → /get остаток добавиться к uri → https://httpbin.org/get
            - StripPrefix=1
            # добавление заголовков
            - AddRequestHeader=X-Request-Demo, Gateway-Demo
            - AddResponseHeader=X-Response-Demo, Processed-By-Gateway

        # Маршрут с условием по заголовкам
        - id: header-based-service
          uri: https://httpbin.org
          predicates:
            - Path=/headers/**
            # Заголовок X-Request-Type присутствует и равен demo
            - Header=X-Request-Type, demo
          filters:
            - StripPrefix=1
            - AddRequestHeader=X-Header-Matched, true

        # Маршрут с условием по параметрам запроса
        - id: query-based-service
          uri: https://httpbin.org
          predicates:
            - Path=/query/**
            # Query присутствует параметр равный
            #   GET /query/test?type=demo HTTP/1.1 будет на на https://httpbin.org/test?type=demo
            - Query=type, demo
          filters:
            # удаляет первый сегмент пути /query/test → /test
            - StripPrefix=1
            - AddRequestHeader=X-Query-Matched, true

        # Маршрут с Retry(механизм повторных попыток)
        - id: retry-service
          uri: https://httpbin.org
          predicates:
            - Path=/retry/**
          filters:
            - name: Retry
              args:
                retries: 3 # Максимальное количество повторов
                statuses: BAD_GATEWAY,GATEWAY_TIMEOUT # HTTP-статусы для повтора
                methods: GET,POST # HTTP-методы, для которых разрешены повторы. Логичны только idempotent методы
                backoff:
                  firstBackoff: 10ms # Первая задержка
                  maxBackoff: 50ms # Максимальная задержка
                  factor: 2 # Коэффициент увеличения задержки
                  basedOnPreviousValue: false # Расчет от базового значения, а не от предыдущего
            - StripPrefix=1

          # Маршрут с модификацией пути
        - id: path-rewrite-service
          uri: https://httpbin.org
          predicates:
            - Path=/api/v1/**
          filters:
            # GET /api/v1/orders/123 -> GET /orders/123 будет удален префикс /api/v1
            - RewritePath=/api/v1/(?<path>.*), /${path} # RewritePath=<регулярное_выражение>, <замена>
            - AddRequestHeader=X-Original-Path, /api/v1 # удобно записать что удалили

        # Fallback маршрут - должен быть ПОСЛЕДНИМ
        - id: fallback-route-yml
          uri: https://httpbin.org
          predicates:
            - Path=/**
          filters:
            - AddResponseHeader=X-Gateway-Fallback, true
            #- StripPrefix=1

  # Настройки Redis для Rate Limiting (отключен по умолчанию, требует Redis) см. README.md
  data:
     redis:
       host: localhost
       port: 6379
       database: 0
       timeout: 2000ms
       lettuce:
         pool:
           max-active: 8
           max-idle: 8
           min-idle: 0

# Настройки для Circuit Breaker
resilience4j:
  circuitbreaker:
    instances:
      demo-circuit-breaker:
        failure-rate-threshold: 50 # 50% неудачных запросов
        wait-duration-in-open-state: 30s # 30 сек ожидания
        sliding-window-size: 10 # окно из 10 запросов
        minimum-number-of-calls: 5 # минимум 5 вызовов для анализа
        slow-call-rate-threshold: 50 # 50% медленных запросов
        slow-call-duration-threshold: 2s # запрос считается медленным >2 сек

  timelimiter:
    instances:
      demo-circuit-breaker:
        timeout-duration: 3s # Максимальное время выполнения запроса 3 секунды (>3 сек будут принудительно прерваны)

# Настройки Actuator для мониторинга
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway,circuitbreakers,circuitbreakerevents

  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  info:
    env:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

# Настройки логирования
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.gualsh.demo.gw: DEBUG
    reactor.netty: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"