package org.gualsh.demo.curbreaker.config;

import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.context.event.EventListener;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Circuit Breaker —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
 *
 * <p>
 * –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Circuit Breaker –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
 * –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ application.yml. –ó–¥–µ—Å—å –º—ã –¥–æ–±–∞–≤–ª—è–µ–º event listeners –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker.
 * </p>
 *
 * <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</strong></p>
 * <ul>
 *   <li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ custom event listeners</li>
 *   <li>–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
 *   <li>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</li>
 *   <li>–ë–æ–ª–µ–µ –≥–∏–±–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º</li>
 * </ul>
 *
 * <p><strong>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</strong></p>
 * <pre>{@code
 * @Autowired
 * @Qualifier("externalApiCircuitBreaker")
 * private CircuitBreaker circuitBreaker;
 *
 * // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–µ
 * circuitBreaker.executeSupplier(() -> externalApiCall());
 * }</pre>
 *
 */
@Slf4j
@Configuration
public class CircuitBreakerConfig {

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Circuit Breaker –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API.
     *
     * <p><strong>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç:</strong></p>
     * <p>
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö beans –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Circuit Breaker –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—É—á—à–µ —É–ø—Ä–∞–≤–ª—è—Ç—å
     * –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ —É–ø—Ä–æ—â–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. CircuitBreakerRegistry –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
     * —Å–æ–∑–¥–∞–µ—Ç—Å—è Spring Boot –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ application.yml.
     * </p>
     *
     * <p><strong>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:</strong></p>
     * <ul>
     *   <li>–ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ registry –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö</li>
     *   <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ @CircuitBreaker –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏</li>
     *   <li>–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</li>
     * </ul>
     *
     * @param registry –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π Spring Boot registry
     * @return Circuit Breaker –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
     */
    @Bean(name = "externalApiCircuitBreaker")
    public CircuitBreaker externalApiCircuitBreaker(CircuitBreakerRegistry registry) {
        return registry.circuitBreaker("externalApi");
    }

    /**
     * Circuit Breaker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
     *
     * <p><strong>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç:</strong></p>
     * <p>
     * –†–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Circuit Breaker. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ã—á–Ω–æ
     * –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞, —á–µ–º –≤–Ω–µ—à–Ω–∏–µ API, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
     * </p>
     *
     * @param registry CircuitBreakerRegistry –∏–∑ –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @return Circuit Breaker –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    @Bean(name = "databaseCircuitBreaker")
    public CircuitBreaker databaseCircuitBreaker(CircuitBreakerRegistry registry) {
        return registry.circuitBreaker("database");
    }

    /**
     * Circuit Breaker –¥–ª—è email —Å–µ—Ä–≤–∏—Å–∞.
     *
     * <p><strong>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç:</strong></p>
     * <p>
     * Email —Å–µ—Ä–≤–∏—Å—ã —á–∞—Å—Ç–æ –∏–º–µ—é—Ç rate limiting –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏.
     * –î–ª—è –Ω–∏—Ö –ø–æ–¥—Ö–æ–¥—è—Ç –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Circuit Breaker.
     * </p>
     *
     * @param registry CircuitBreakerRegistry –∏–∑ –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @return Circuit Breaker –¥–ª—è email —Å–µ—Ä–≤–∏—Å–∞
     */
    @Bean(name = "emailServiceCircuitBreaker")
    public CircuitBreaker emailServiceCircuitBreaker(CircuitBreakerRegistry registry) {
        return registry.circuitBreaker("emailService");
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event listeners –¥–ª—è –≤—Å–µ—Ö Circuit Breaker instances –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
     *
     * <p><strong>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç:</strong></p>
     * <p>
     * @EventListener(ContextRefreshedEvent.class) –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Spring. –ú—ã –ø–æ–ª—É—á–∞–µ–º CircuitBreakerRegistry —á–µ—Ä–µ–∑ ApplicationContext,
     * —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
     * </p>
     *
     * <p><strong>–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π Circuit Breaker:</strong></p>
     * <ul>
     *   <li>SUCCESS - —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤</li>
     *   <li>ERROR - –æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞</li>
     *   <li>STATE_TRANSITION - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (CLOSED -> OPEN -> HALF_OPEN)</li>
     *   <li>RESET - —Å–±—Ä–æ—Å Circuit Breaker –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</li>
     *   <li>IGNORED_ERROR - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è –æ—à–∏–±–∫–∞</li>
     *   <li>NOT_PERMITTED - –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ (Circuit Breaker –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN)</li>
     * </ul>
     *
     * <p><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:</strong></p>
     * <p>
     * –í —ç—Ç–∏—Ö listeners –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Ç—Ä–∏–∫ –≤:
     * </p>
     * <ul>
     *   <li>Prometheus/Grafana –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</li>
     *   <li>DataDog/New Relic –¥–ª—è APM –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</li>
     *   <li>Slack/Teams –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤</li>
     *   <li>Custom logging systems</li>
     * </ul>
     *
     * @param event —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    @EventListener(ContextRefreshedEvent.class)
    public void configureEventListeners(ContextRefreshedEvent event) {
        log.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ event listeners –¥–ª—è Circuit Breakers...");

        // –ü–æ–ª—É—á–∞–µ–º CircuitBreakerRegistry –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        CircuitBreakerRegistry registry = event.getApplicationContext()
            .getBean(CircuitBreakerRegistry.class);

        // –î–æ–±–∞–≤–ª—è–µ–º event listeners –¥–ª—è –≤—Å–µ—Ö Circuit Breaker instances
        registry.getAllCircuitBreakers().forEach(circuitBreaker -> {
            String cbName = circuitBreaker.getName();
            log.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ event listeners –¥–ª—è Circuit Breaker: {}", cbName);

            // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
            circuitBreaker.getEventPublisher()
                .onStateTransition(stateEvent -> {
                    log.warn("üîÑ Circuit Breaker [{}] –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {} -> {} (–ø—Ä–∏—á–∏–Ω–∞: {})",
                        stateEvent.getCircuitBreakerName(),
                        stateEvent.getStateTransition().getFromState(),
                        stateEvent.getStateTransition().getToState(),
                        stateEvent.getStateTransition().getFromState() != stateEvent.getStateTransition().getToState()
                            ? "threshold exceeded" : "recovery detected");

                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–æ–≤
                    sendStateChangeAlert(stateEvent.getCircuitBreakerName(),
                        stateEvent.getStateTransition().getFromState(),
                        stateEvent.getStateTransition().getToState());
                });

            // –°–ª—É—à–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
            circuitBreaker.getEventPublisher()
                .onSuccess(successEvent -> {
                    log.debug("‚úÖ Circuit Breaker [{}] —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ –∑–∞ {}ms",
                        successEvent.getCircuitBreakerName(),
                        successEvent.getElapsedDuration().toMillis());

                    // –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    recordSuccessMetric(successEvent.getCircuitBreakerName(),
                        successEvent.getElapsedDuration().toMillis());
                });

            // –°–ª—É—à–∞—Ç–µ–ª—å –æ—à–∏–±–æ–∫ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
            circuitBreaker.getEventPublisher()
                .onError(errorEvent -> {
                    log.warn("‚ùå Circuit Breaker [{}] –æ—à–∏–±–∫–∞ –∑–∞ {}ms: {}",
                        errorEvent.getCircuitBreakerName(),
                        errorEvent.getElapsedDuration().toMillis(),
                        errorEvent.getThrowable().getMessage() != null
                            ? errorEvent.getThrowable().getMessage()
                            : errorEvent.getThrowable().getClass().getSimpleName());

                    // –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
                    recordErrorMetric(errorEvent.getCircuitBreakerName(),
                        errorEvent.getThrowable());
                });

            // –°–ª—É—à–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ (–∫–æ–≥–¥–∞ Circuit Breaker –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN)
            circuitBreaker.getEventPublisher()
                .onCallNotPermitted(notPermittedEvent -> {
                    log.warn("üö´ Circuit Breaker [{}] –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN",
                        notPermittedEvent.getCircuitBreakerName());

                    // –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
                    recordRejectedCallMetric(notPermittedEvent.getCircuitBreakerName());
                });

            // –°–ª—É—à–∞—Ç–µ–ª—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –æ—à–∏–±–æ–∫ (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
            circuitBreaker.getEventPublisher()
                .onIgnoredError(ignoredErrorEvent -> {
                    log.debug("‚ö†Ô∏è Circuit Breaker [{}] –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É: {}",
                        ignoredErrorEvent.getCircuitBreakerName(),
                        ignoredErrorEvent.getThrowable().getMessage() != null
                            ? ignoredErrorEvent.getThrowable().getMessage()
                            : ignoredErrorEvent.getThrowable().getClass().getSimpleName());
                });
        });

        log.info("Event listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è {} Circuit Breakers",
            registry.getAllCircuitBreakers().size());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker.
     *
     * <p><strong>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç:</strong></p>
     * <p>
     * –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Slack, Teams,
     * PagerDuty –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞–≤–∞—Ç—å
     * –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.
     * </p>
     *
     * @param circuitBreakerName –∏–º—è Circuit Breaker
     * @param fromState –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param toState –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    private void sendStateChangeAlert(String circuitBreakerName,
                                      CircuitBreaker.State fromState,
                                      CircuitBreaker.State toState) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        // slackNotificationService.sendAlert(...)
        // pagerDutyService.triggerIncident(...)
        // emailNotificationService.sendAlert(...)

        log.info("üìß –ê–ª–µ—Ä—Ç: Circuit Breaker {} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ {} -> {}",
            circuitBreakerName, fromState, toState);
    }

    /**
     * –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
     *
     * @param circuitBreakerName –∏–º—è Circuit Breaker
     * @param durationMs –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private void recordSuccessMetric(String circuitBreakerName, long durationMs) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        // meterRegistry.timer("circuit.breaker.success", "name", circuitBreakerName)
        //              .record(Duration.ofMillis(durationMs));
    }

    /**
     * –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏.
     *
     * @param circuitBreakerName –∏–º—è Circuit Breaker
     * @param throwable –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
     */
    private void recordErrorMetric(String circuitBreakerName, Throwable throwable) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        // meterRegistry.counter("circuit.breaker.error",
        //                      "name", circuitBreakerName,
        //                      "exception", throwable.getClass().getSimpleName())
        //              .increment();
    }

    /**
     * –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
     *
     * @param circuitBreakerName –∏–º—è Circuit Breaker
     */
    private void recordRejectedCallMetric(String circuitBreakerName) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        // meterRegistry.counter("circuit.breaker.rejected", "name", circuitBreakerName)
        //              .increment();
    }
}