version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-postgres-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: testdb
      DB_USER: user
      DB_PASSWORD: password

      # Server configuration
      SERVER_PORT: 8080

      # Logging configuration
      LOG_LEVEL: INFO
      APP_LOG_LEVEL: INFO
      SQL_LOG_LEVEL: WARN
      SHOW_SQL: false

      # JVM options for containerized environment
      JAVA_OPTS: >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=75.0
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -Djava.security.egd=file:/dev/./urandom
    ports:
      - "8080:8080"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

# Networks
networks:
  app-network:
    driver: bridge
    name: spring-postgres-network

# Volumes
volumes:
  postgres_data:
    driver: local