package ru.otus.hw;

/*
 * ДОПОЛНИТЕЛЬНЫЕ ОБРАЗОВАТЕЛЬНЫЕ МОМЕНТЫ:
 *
 * 1. АРХИТЕКТУРА СОКЕТОВ:
 *    - ServerSocket слушает порт и создает новые Socket для каждого клиента
 *    - Socket представляет двунаправленное соединение между клиентом и сервером
 *    - Потоки InputStream/OutputStream обеспечивают передачу данных
 *
 * 2. ЖИЗНЕННЫЙ ЦИКЛ СОЕДИНЕНИЯ:
 *    а) Сервер создает ServerSocket и вызывает accept()
 *    б) Клиент создает Socket и подключается к серверу
 *    в) Устанавливается TCP соединение
 *    г) Обмен данными через потоки
 *    д) Закрытие соединения одной из сторон
 *
 * 3. ОБРАБОТКА ОШИБОК:
 *    - IOException - проблемы с сетью или вводом-выводом
 *    - UnknownHostException - неверный адрес сервера
 *    - SocketTimeoutException - превышено время ожидания
 *    - ConnectException - сервер недоступен
 *
 * 4. УПРАВЛЕНИЕ РЕСУРСАМИ:
 *    - Всегда закрывайте сокеты в блоке finally или используйте try-with-resources
 *    - Не забывайте про потоки - они тоже требуют закрытия
 *    - Используйте пулы потоков для многопользовательских серверов
 *
 * 5. ПРОИЗВОДИТЕЛЬНОСТЬ И МАСШТАБИРУЕМОСТЬ:
 *    - Один поток на клиента может не масштабироваться для тысяч соединений
 *    - Рассмотрите NIO (New I/O) для высоконагруженных приложений
 *    - Используйте буферизованные потоки для улучшения производительности
 */

/**
 * Демонстрация Java Socket API для клиент-серверного взаимодействия<p>
 *
 * Этот пример показывает создание простого эхо-сервера и клиента,
 * демонстрируя основные принципы работы с сокетами в Java.
 */
public class SocketDemo {

    /**
     * Главный метод для демонстрации работы<p>
     *
     * Показывает как запустить сервер и подключиться к нему клиентом
     * В реальном приложении сервер и клиент обычно запускаются отдельно
     */
    public static void main(String[] args) {
        final int PORT = 8080;

        // Запускаем сервер в отдельном потоке
        EchoServer server = new EchoServer(PORT);

        Thread serverThread = new Thread(server::start);
        serverThread.start();

/*        // Даем серверу время на запуск
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }*/

        // Создаем и запускаем клиент
        EchoClient client = new EchoClient("localhost", PORT);

        // В реальном приложении клиент бы запускался отдельно
        System.out.println("Для демонстрации введите несколько сообщений:");
        client.connectAndInteractWithServerAndUser();

        // Останавливаем сервер
        server.stop();
    }
}